/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterfaces;

import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.image.BufferedImage;

import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;

import javax.imageio.ImageIO;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

import utils.TiledPanel;

/**
 *
 * @author Pirill
 */
public class GameGUI extends javax.swing.JFrame implements GameInterface {
    
    private class MinistryObj {
        public int id;
        public String name;
        public int budget;
        public MinistryObj(int id, String name, int budget) {
            this.id = id;
            this.name = name;
            this.budget = budget;
        }
    }
    
    private final Map<Integer, MinistryObj> ministries = new TreeMap<>();
    private final Map<Integer, JLabel> protesters = new TreeMap<>();    //Un map intre Id-ul unui protestatar si JLabel-ul asociat
    
    private StyledDocument doc;
    private final ArrayList<SimpleAttributeSet> textStyles = new ArrayList<>(); //Stilurile de text pentru consola
    private final ArrayList<JLabel> ministryBudgets = new ArrayList<>(); //JLabel-urile pentru bugetul actual
    private final ArrayList<JPanel> protesterPanels = new ArrayList<>(); //JPanel-urile ce contin protestatari
    private TiledPanel policePanel = null;  //Panel-ul pentru politie pentru a schimba usor imaginea
    private int ministryCount = 0;

    
    public GameGUI() {
        initComponents();
        generateGUI();
        initStyles();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        backgroundPanel = new javax.swing.JPanel();
        textPanel = new javax.swing.JPanel();
        textOutputScrollPane = new javax.swing.JScrollPane();
        textOutputPane = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DEMOCRACY");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        backgroundPanel.setBackground(new java.awt.Color(30, 30, 30));
        backgroundPanel.setLayout(new java.awt.GridBagLayout());

        textPanel.setLayout(new java.awt.GridBagLayout());

        textOutputScrollPane.setPreferredSize(new java.awt.Dimension(500, 800));

        textOutputPane.setEditable(false);
        textOutputPane.setBackground(new java.awt.Color(51, 51, 51));
        textOutputPane.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        textOutputPane.setForeground(new java.awt.Color(255, 255, 255));
        textOutputPane.setAutoscrolls(false);
        textOutputPane.setPreferredSize(new java.awt.Dimension(600, 300));
        textOutputScrollPane.setViewportView(textOutputPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        textPanel.add(textOutputScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        backgroundPanel.add(textPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(backgroundPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JTextPane textOutputPane;
    private javax.swing.JScrollPane textOutputScrollPane;
    private javax.swing.JPanel textPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void showGameSettings(int ministriesSize, int ministryMaxBudget, int protestsLimit, int spawnProtesterInterval, int intvalUEFunding)
    {
        appendTextLine("=================================================");
        appendTextLine("                   DEMOCRACY                     ");
        appendTextLine("Settings:");
        appendTextLine("> ministries: " + ministriesSize);
        appendTextLine("> ministryMaxBudget: " + ministryMaxBudget + "€");
        appendTextLine("> protesterLimit: " + protestsLimit);
        appendTextLine("> spawnProtesterInterval: " + spawnProtesterInterval);
        appendTextLine("> intvalUEFunding: " + intvalUEFunding);
        appendTextLine("=================================================\n");
    }

    @Override
    public void newMinistry(int id, String name, int budget) {
        ministries.put(id, new MinistryObj(id, name, budget));

        appendTextLine("["+id+"] "+name+" (€"+budget+") was created", id%ministryCount);
        
        generateMinistry(id, name, budget, id%7+1);       
    }

    @Override
    public void newProtester(int protesterID, int ministryID) {
        MinistryObj obj = ministries.get(ministryID);
        
        appendTextLine("(\\)+ New protester ["+protesterID+"] at "+obj.name, ministryID%ministryCount);

        JLabel iconLabel = new javax.swing.JLabel();
        iconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/protester/protester" + (ministryID%ministryCount + 1) + ".png")));
        protesterPanels.get(ministryID).add(iconLabel);
        protesters.put(protesterID, iconLabel);
        
        protesterPanels.get(ministryID).revalidate();
        protesterPanels.get(ministryID).repaint();
    }

    @Override
    public void protesterLeave(int protesterID, int ministryID, boolean withMoney) {
        
        if (withMoney) {
            appendTextLine("(\\)- Protester ["+protesterID+"] left with €€€", ministryID%ministryCount);
        }
        else {
            appendTextLine("(\\)- Protester ["+protesterID+"] left with no money", ministryID%ministryCount);
        }
        
        protesterPanels.get(ministryID).remove(protesters.get(protesterID));
        protesters.remove(protesterID);

        protesterPanels.get(ministryID).revalidate();
        protesterPanels.get(ministryID).repaint();
        
    }
    
    @Override
    public void protesting(int protesterID) {

        appendTextLine("Protester ["+protesterID+"] is protesting...");
    }
    
    @Override
    public void ueFundingMinistry(int ministryID, int amount) {
        MinistryObj obj = ministries.get(ministryID);
        obj.budget += amount;

        if (ministryID == 0)    //N-are rost sa afisam spam pentru fiecare minister.
            appendTextLine("\nUEFunding: All ministry budgets + €"+amount+"\n", ministryCount);
        
        ministryBudgets.get(ministryID).setText("<html><div style='text-align: center;'>€" + Integer.toString(obj.budget) + "</div></html>");
        ministryBudgets.get(ministryID).setForeground(new Color(126,230,85)); //Verde
    }

    @Override
    public void ministryTheft(int ministryID, int amount) {
        MinistryObj obj = ministries.get(ministryID);
        obj.budget -= amount;
        
        appendTextLine("MStl Minister of ["+ministryID+"] "+obj.name+" stole €"+amount, ministryID%ministryCount);
        
        ministryBudgets.get(ministryID).setText("<html><div style='text-align: center;'>€" + Integer.toString(obj.budget) + "</div></html>");
        ministryBudgets.get(ministryID).setForeground(new Color(255,72,72)); //Rosu
    }

    @Override
    public void ministryDonate(int ministryID, int amount) {
        MinistryObj obj = ministries.get(ministryID);
        obj.budget -= amount;
        
        appendTextLine("MDnt Minister of ["+ministryID+"] "+obj.name+" donated €"+amount, ministryID%ministryCount);
        
        ministryBudgets.get(ministryID).setText("<html><div style='text-align: center;'>€" + Integer.toString(obj.budget) + "</div></html>");
        ministryBudgets.get(ministryID).setForeground(new Color(98,193,232)); //Albastru
    }

    @Override
    public void policeArived() {

        appendTextLine("\n       ░▓██ Police arrived ██▓░\n", ministryCount);
        
        BufferedImage image = null;
        try {
            image = ImageIO.read(getClass().getResource("/img/policeTile1.png"));
        } catch (Exception e) { System.err.println(e.getMessage()); }
        
        policePanel.setImage(image);
        policePanel.repaint();
    }

    @Override
    public void policeLeft() {
        
        appendTextLine("\n       ░▓██ Police has left ██▓░\n", ministryCount);
                
        BufferedImage image = null;
        try {
            image = ImageIO.read(getClass().getResource("/img/policeTile2.png"));
        } catch (Exception e) { System.err.println(e.getMessage()); }
        
        policePanel.setImage(image);
        policePanel.repaint();
    }

//-------------------------------------------------------------------------------------------
    
    //Initializeaza stilurile pentru textPane
    private void initStyles() {
        doc = textOutputPane.getStyledDocument();
        
        SimpleAttributeSet style = new SimpleAttributeSet();       
        StyleConstants.setForeground(style, new Color(255,72,72)); //Rosu
        textStyles.add(style);
        
        style = new SimpleAttributeSet();
        StyleConstants.setForeground(style, new Color(255,166,80)); //Portocaliu
        textStyles.add(style);
        
        style = new SimpleAttributeSet();
        StyleConstants.setForeground(style, new Color(255,210,72)); //Galben
        textStyles.add(style);
        
        style = new SimpleAttributeSet();
        StyleConstants.setForeground(style, new Color(126,230,85)); //Verde
        textStyles.add(style);
        
        style = new SimpleAttributeSet();
        StyleConstants.setForeground(style, new Color(98,193,232)); //Albastru
        textStyles.add(style);
        
        style = new SimpleAttributeSet();
        StyleConstants.setForeground(style, new Color(193,113,255)); //Mov
        textStyles.add(style);
        
        style = new SimpleAttributeSet();
        StyleConstants.setForeground(style, new Color(125,125,125)); //Gri
        textStyles.add(style);
        
        ministryCount = textStyles.size(); //7
        
        style = new SimpleAttributeSet();
        StyleConstants.setForeground(style, new Color(255,255,255)); //Politie
        StyleConstants.setFontSize(style, 15);
        StyleConstants.setAlignment(style, StyleConstants.ALIGN_CENTER);
        textStyles.add(style);
        
    }
    
    //Adauga o linie in consola folosind un stil predefinit
    private void appendTextLine(String text, int id) {
        
        if (id < 0 || id > textStyles.size()) {
            System.err.println("ID pentru stil al textului invalid.");
        }
        else {
            try
            {
                doc.insertString(doc.getLength(), text+"\n", textStyles.get(id));

                //Autoscroll
                textOutputPane.setCaretPosition(textOutputPane.getDocument().getLength());
            }
            catch(Exception e) { System.err.println(e); }
        }
    }
    
    //Adauga o linie in consola cu textul implicit
    private void appendTextLine(String text) {
    try
    {
        doc.insertString(doc.getLength(), text+"\n", null);

        //Autoscroll
        textOutputPane.setCaretPosition(textOutputPane.getDocument().getLength());
    }
    catch(Exception e) { System.err.println(e); }
    }

    private void generateGUI() {
        
        //UE flag background
        JPanel ueLabelPanel = new javax.swing.JPanel();
        
        ueLabelPanel.setBackground(new Color(0,126,237));
        ueLabelPanel.setMinimumSize(new Dimension(75, 50));
        ueLabelPanel.setPreferredSize(new Dimension(75, 50));

        //UE flag
        GridBagConstraints ueConstraints = new java.awt.GridBagConstraints();
        ueConstraints.gridx = 1;
        ueConstraints.gridy = 0;
        ueConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        ueConstraints.gridwidth = ueConstraints.REMAINDER;
        ueConstraints.insets = new Insets(10, 0, 0, 10);//top,left,bottom,right
        ueConstraints.ipady = 10;
        backgroundPanel.add(ueLabelPanel, ueConstraints);
           
        JLabel ueLabel = new javax.swing.JLabel();
        ueLabel.setIcon(new javax.swing.ImageIcon(this.getClass().getResource("/img/ueFlag.jpg")));
        ueLabel.setMaximumSize(new Dimension(75, 50));
        ueLabel.setMinimumSize(new Dimension(75, 50));
        ueLabel.setPreferredSize(new Dimension(75, 50));
        ueLabelPanel.add(ueLabel);

        //Police banner
        BufferedImage image = null;
        try {
            image = ImageIO.read(this.getClass().getResource("/img/policeTile2.png"));
        } catch (Exception e) { System.err.println(e.getMessage()); }
        
        policePanel = new TiledPanel(image);
        
        policePanel.setBackground(new Color(0,126,237));
        policePanel.setMinimumSize(new Dimension(50, 50));
        policePanel.setPreferredSize(new Dimension(50, 50));
        
        GridBagConstraints policeConstraints = new java.awt.GridBagConstraints();
        policeConstraints.gridx = 1;
        policeConstraints.gridy = 2;
        policeConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        policeConstraints.gridwidth = policeConstraints.REMAINDER;
        policeConstraints.insets = new Insets(0, 0, 0, 10);//top,left,bottom,right
        backgroundPanel.add(policePanel, policeConstraints);
        
        getContentPane().revalidate();
        getContentPane().repaint();
    }
    
    private void generateMinistry(int id, String name, int budget, int colour) {
        
        //Ministry panel
        JPanel ministryPanel = new javax.swing.JPanel();
        ministryPanel.setLayout(new GridLayout(0,1));
        ministryPanel.setBackground(new Color((id%2 + 1) * 40, (id%2 + 1) * 40, (id%2 + 1) * 40)); 
        
        GridBagConstraints ministryConstraints = new GridBagConstraints();
        ministryConstraints.gridx = id+1;
        ministryConstraints.gridy = 1;
        ministryConstraints.insets = new Insets(10,0,10,10);//top,left,bottom,right
        backgroundPanel.add(ministryPanel, ministryConstraints);
        
        //Ministry icon
        JLabel iconLabel = new javax.swing.JLabel();
        iconLabel.setIcon(new javax.swing.ImageIcon(this.getClass().getResource("/img/bank/bank" + colour + ".png")));
        iconLabel.setBorder(new EmptyBorder(10,5,0,5));//top,left,bottom,right
        ministryPanel.add(iconLabel);
        
        //Ministry name        
        JLabel nameLabel = new javax.swing.JLabel();
        nameLabel.setText("<html><div style='text-align: center;'>"+ name +"</div></html>");
        nameLabel.setPreferredSize(new Dimension(100, 0));
        nameLabel.setForeground(Color.white);
        nameLabel.setBorder(new EmptyBorder(10,5,0,5));//top,left,bottom,right
        nameLabel.setFont(new java.awt.Font(nameLabel.getFont().getName(), java.awt.Font.BOLD, 14));
        nameLabel.setHorizontalAlignment(JLabel.CENTER);
        ministryPanel.add(nameLabel);
        
        //Ministry budget
        JLabel budgetLabel = new javax.swing.JLabel();
        budgetLabel.setText("<html><div style='text-align: center;'>€"+ budget +"</div></html>");
        budgetLabel.setPreferredSize(new Dimension(100, 0));
        budgetLabel.setForeground(new Color(126,230,85));//Green
        budgetLabel.setBorder(new EmptyBorder(5,5,0,5));//top,left,bottom,right
        budgetLabel.setFont(new java.awt.Font(nameLabel.getFont().getName(), java.awt.Font.BOLD, 30));
        budgetLabel.setHorizontalAlignment(JLabel.CENTER);
        ministryPanel.add(budgetLabel);
        ministryBudgets.add(budgetLabel);
        
        //Protester grid
        GridBagConstraints protesterConstraints = new GridBagConstraints();
        protesterConstraints.gridx = id+1;
        protesterConstraints.gridy = 3;
        protesterConstraints.insets = new Insets(10,0,10,10);//top,left,bottom,right
        protesterConstraints.weighty = 1;
        protesterConstraints.fill = GridBagConstraints.BOTH;
        
        JPanel protesterPanel = new javax.swing.JPanel();
        protesterPanel.setLayout(new GridLayout(0,3));
        protesterPanel.setPreferredSize(new Dimension(100, 35));
        protesterPanel.setBackground(new Color((id%2 + 1) * 40, (id%2 + 1) * 40, (id%2 + 1) * 40));
        backgroundPanel.add(protesterPanel, protesterConstraints);
        protesterPanels.add(protesterPanel);
        
        backgroundPanel.revalidate();
        backgroundPanel.repaint();
        pack();
    }
}

/*
try
{
    doc.insertString(doc.getLength(), , textGreen);
    textOutputPane.setCaretPosition(textOutputPane.getDocument().getLength());
}
catch(Exception e) { System.err.println(e); }
*/